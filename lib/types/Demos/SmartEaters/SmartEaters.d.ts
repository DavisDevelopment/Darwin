import { CrossoverMethod } from "../../CrossoverMethods";
import { Darwin } from "../../Darwin";
import { Eater } from "./Eater";
import { NeuralNetFunction } from "./NeuralNet";
export declare const DPR: number;
export interface EatersParams {
    population_size?: number;
    hidden_layers_sizes?: number[];
    food_count?: number;
    crossover_rate?: number;
    mutation_rate?: number;
    elite_count?: number;
    elite_copies?: number;
    max_speed?: number;
    max_turn_rate?: number;
    ticks_per_gen?: number;
    crossover_method?: CrossoverMethod;
    eater_size?: number;
    food_size?: number;
    wrap_borders?: boolean;
}
export declare class SmartEaters {
    private genetics;
    private cnv;
    private ctx;
    private brain;
    private population;
    private food;
    private ticks;
    private layer_sizes;
    private selected_idx;
    follow_fittest: boolean;
    private paused;
    private fast_mode;
    fast_mode_refresh_rate: number;
    show_lines: boolean;
    hide_non_selected: boolean;
    stop_mating: boolean;
    private params;
    constructor(cnv: HTMLCanvasElement, params?: EatersParams);
    private spawnFood;
    private randomPos;
    private getClosestFood;
    private tick;
    pause(): void;
    private nextGeneration;
    run(): void;
    private render;
    private drawGenerationInfo;
    private highlightSelectedEater;
    private drawEaters;
    private drawFood;
    setSelected(index: number): void;
    getSelected(): Eater;
    getEater(idx: number): Eater;
    getEaterBrain(idx: number): NeuralNetFunction;
    toggleFastMode(): void;
    getDarwinInstance(): Darwin<number>;
    getFittestBrain(): NeuralNetFunction;
    toggleMating(): void;
    readonly selectedIdx: number;
    readonly parameters: Readonly<EatersParams>;
}
