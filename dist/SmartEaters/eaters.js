!function(t){var s={};function e(i){if(s[i])return s[i].exports;var o=s[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=s,e.d=function(t,s,i){e.o(t,s)||Object.defineProperty(t,s,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,s){if(1&s&&(t=e(t)),8&s)return t;if(4&s&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&s&&"string"!=typeof t)for(var o in t)e.d(i,o,function(s){return t[s]}.bind(null,o));return i},e.n=function(t){var s=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(s,"a",s),s},e.o=function(t,s){return Object.prototype.hasOwnProperty.call(t,s)},e.p="",e(e.s=3)}([function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),function(t){t[t.SINGLE_POINT=0]="SINGLE_POINT",t[t.TWO_POINT=1]="TWO_POINT",t[t.UNIFORM=2]="UNIFORM",t[t.HALF_UNIFORM=3]="HALF_UNIFORM",t[t.ORDERED=4]="ORDERED"}(s.CrossoverMethod||(s.CrossoverMethod={}))},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),function(t){t[t.FLIP=0]="FLIP",t[t.SWAP=1]="SWAP"}(s.MutationMethod||(s.MutationMethod={}))},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),function(t){t.clamp=((t,s,e)=>t>=s&&t<=e?t:t<s?s:e),t.map=((t,s,e,i,o)=>(t-s)/(e-s)*(o-i)+i),t.TWO_PI=2*Math.PI}(s.MathUtils||(s.MathUtils={}))},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const i=e(0),o=e(4),n=document.createElement("canvas");n.width=window.innerWidth*o.DPR,n.height=window.innerHeight*o.DPR,n.style.width=`${window.innerWidth}px`,n.style.height=`${window.innerHeight}px`,n.getContext("2d").scale(o.DPR,o.DPR),document.body.style.padding="0",document.body.style.margin="0",document.body.appendChild(n);const r=new o.SmartEaters(n,{elite_count:5,elite_copies:2,ticks_per_gen:2e3,population_size:100,food_count:120,crossover_method:i.CrossoverMethod.TWO_POINT,wrap_borders:!0,mutation_rate:.02,hidden_layers_sizes:[8]});r.run(),window.addEventListener("resize",()=>{n.style.width=`${window.innerWidth}px`,n.style.height=`${window.innerHeight}px`,n.width=window.innerWidth*o.DPR,n.height=window.innerHeight*o.DPR,n.getContext("2d").scale(o.DPR,o.DPR)}),window.addEventListener("keypress",t=>{switch(t.key){case" ":r.pause();break;case"f":r.follow_fittest=!r.follow_fittest;break;case"p":r.fast_mode_refresh_rate+=2;break;case"m":r.fast_mode_refresh_rate-=2,r.fast_mode_refresh_rate<1&&(r.fast_mode_refresh_rate=1);break;case"l":r.show_lines=!r.show_lines;break;case"h":r.hide_non_selected=!r.hide_non_selected;break;case"a":if(r.selectedIdx){const t=r.getEaterBrain(r.selectedIdx),s=window.URL.createObjectURL(new Blob([`\n                {\n                    "params": ${JSON.stringify(r.parameters)},\n                    "brain": ${JSON.stringify(t)}\n                }\n                `]));window.open(`analysis.html?b=${s}`)}break;default:r.toggleFastMode()}})},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const i=e(0),o=e(5),n=e(9),r=e(10),a=e(11),h=e(2);s.DPR=window.devicePixelRatio;s.SmartEaters=class{constructor(t,e){this.ticks=0,this.selected_idx=-1,this.follow_fittest=!1,this.paused=!1,this.fast_mode=!1,this.fast_mode_refresh_rate=2,this.show_lines=!1,this.hide_non_selected=!1,this.stop_mating=!1,this.cnv=t,this.ctx=this.cnv.getContext("2d");let l=(t,s)=>null===t||void 0===t?s:t;this.params=e||{},this.params.population_size=this.params.population_size||30,this.params.hidden_layers_sizes=this.params.hidden_layers_sizes||[6],this.params.food_count=this.params.food_count||40,this.params.crossover_rate=l(this.params.crossover_rate,.7),this.params.mutation_rate=l(this.params.mutation_rate,.1),this.params.elite_count=l(this.params.elite_count,4),this.params.elite_copies=l(this.params.elite_copies,1),this.params.max_speed=this.params.max_speed||2,this.params.max_turn_rate=this.params.max_turn_rate||.3,this.params.ticks_per_gen=this.params.ticks_per_gen||1e3,this.params.crossover_method=l(this.params.crossover_method,i.CrossoverMethod.SINGLE_POINT),this.params.eater_size=this.params.eater_size||12,this.params.food_size=this.params.food_size||5,this.params.wrap_borders=l(this.params.wrap_borders,!0),this.layer_sizes=[4,...this.params.hidden_layers_sizes,2],this.brain=new r.NeuralNet,this.genetics=new o.Darwin({population_size:this.params.population_size,rand_func:()=>2*Math.random()-1,chromosome_length:r.NeuralNet.weightsCount(this.layer_sizes)}),this.population=this.genetics.getPopulation().map((t,s)=>new n.Eater(this.randomPos(),Math.random()*h.MathUtils.TWO_PI,s)),this.cnv.addEventListener("click",t=>{const e=new a.Vector2D(t.clientX*s.DPR,t.clientY*s.DPR);let i=0,o=1/0;for(let t=0;t<this.population.length;t++){const s=this.population[t].position.dist_sq(e);s<o&&(o=s,i=t)}Math.pow(o,.5)<2*this.params.eater_size*s.DPR?this.setSelected(i):this.selected_idx=-1}),this.spawnFood()}spawnFood(){this.food=[];for(let t=0;t<this.params.food_count;t++)this.food.push(this.randomPos())}randomPos(){return a.Vector2D.rand().hadamard([this.cnv.width,this.cnv.height])}getClosestFood(t){let s=0,e=1/0;for(let i=0;i<this.food.length;i++){const o=t.position.dist_sq(this.food[i]);o<e&&(e=o,s=i)}return{index:s,dist:Math.pow(e,.5)}}tick(){if(!this.paused){++this.ticks>this.params.ticks_per_gen&&(this.nextGeneration(),this.ticks=0);for(const t of this.population){const e=this.genetics.getPopulation()[t.getChromosomeIdx()];this.brain.putWeights(this.layer_sizes,e.getBits());const i=this.getClosestFood(t);t.closest_food=a.Vector2D.clone(this.food[i.index]);const[o,n]=this.food[i.index].sub(t.position).normalize().toArray();if(i.dist<(this.params.eater_size+this.params.food_size)/2){const t=e.getFitness()||1;e.setFitness(2*t),this.food[i.index]=this.randomPos()}const r=[Math.cos(t.angle),Math.sin(t.angle)],[l,c]=this.brain.run(...r,o,n),u=h.MathUtils.clamp(l-c,-this.params.max_turn_rate,this.params.max_turn_rate);t.angle+=u,t.lookat=new a.Vector2D(r[0],r[1]),t.food_dir=new a.Vector2D(o,n),t.position.plus(t.lookat.times(this.params.max_speed*s.DPR));const d=t.position;this.params.wrap_borders?(d.x>this.cnv.width&&(d.x=0),d.x<0&&(d.x=this.cnv.width),d.y>this.cnv.height&&(d.y=0),d.y<0&&(d.y=this.cnv.height)):(d.x>this.cnv.width&&(d.x=this.cnv.width),d.x<0&&(d.x=0),d.y>this.cnv.height&&(d.y=this.cnv.height),d.y<0&&(d.y=0))}}}pause(){this.paused=!this.paused}nextGeneration(){if(!this.stop_mating){this.genetics.mate();for(const t of this.genetics.getPopulation())t.setFitness(0);this.spawnFood();for(let t of this.population)t.position=this.randomPos();this.selected_idx=-1}}run(){let t=()=>{this.tick(),this.render(),this.fast_mode?setTimeout(t,0):requestAnimationFrame(t)};t()}render(){this.fast_mode&&this.ticks%this.fast_mode_refresh_rate!=0||(this.genetics.updateStats(),this.ctx.clearRect(0,0,this.cnv.width,this.cnv.height),this.drawFood(),this.drawEaters(),this.highlightSelectedEater(),this.drawGenerationInfo())}drawGenerationInfo(){const t=0!==this.genetics.getFittest().getFitness()?Math.log2(this.genetics.getFittest().getFitness()):0;this.ctx.fillStyle="black",this.ctx.fillText(`Generation: ${this.genetics.getGeneration()}`,5,10),this.ctx.fillText(`avg: ${Math.log2(1+this.genetics.getAverageFitness()).toFixed(3)}`,5,25),this.ctx.fillText(`best: ${t}`,5,40),this.ctx.fillText(`ticks: ${this.ticks} / ${this.params.ticks_per_gen}`,5,55)}highlightSelectedEater(){if(this.follow_fittest&&(this.selected_idx=this.genetics.getStats().fittest_idx),-1!==this.selected_idx&&!this.hide_non_selected){this.ctx.lineWidth=2,this.ctx.strokeStyle="red",this.ctx.beginPath();const t=this.population[this.selected_idx],e=t.position;this.ctx.arc(e.x/s.DPR,e.y/s.DPR,2*this.params.eater_size,0,h.MathUtils.TWO_PI),this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.lineWidth=1,this.ctx.strokeStyle="black",this.ctx.moveTo(e.x/s.DPR,e.y/s.DPR);const i=e.add(t.food_dir.times(2*this.params.eater_size*s.DPR));this.ctx.lineTo(i.x/s.DPR,i.y/s.DPR),this.ctx.stroke()}}drawEaters(){const t=[46,204,113],e=[255,0,0],i=Math.log2(this.genetics.getFittest().getFitness());let o=0;for(const n of this.population){if(this.show_lines){this.ctx.beginPath(),this.ctx.lineWidth=1,this.ctx.strokeStyle="black",this.ctx.moveTo(n.position.x/s.DPR,n.position.y/s.DPR);const t=n.position.add(n.food_dir.times(n.position.dist(n.closest_food)));this.ctx.lineTo(t.x/s.DPR,t.y/s.DPR),this.ctx.stroke()}if(this.hide_non_selected&&void 0!==this.selected_idx&&o++!==this.selected_idx)continue;const r=Math.log2(this.genetics.getPopulation()[n.getChromosomeIdx()].getFitness()),l=[h.MathUtils.clamp(h.MathUtils.map(r,0,i,t[0],e[0]),Math.min(t[0],e[0]),Math.max(t[0],e[0])),h.MathUtils.clamp(h.MathUtils.map(r,0,i,t[1],e[1]),Math.min(t[1],e[1]),Math.max(t[1],e[1])),h.MathUtils.clamp(h.MathUtils.map(r,0,i,t[2],e[2]),Math.min(t[2],e[2]),Math.max(t[2],e[2]))];this.ctx.lineWidth=4,this.ctx.fillStyle=`rgb(\n                ${Math.floor(l[0])},\n                ${Math.floor(l[1])},\n                ${Math.floor(l[1])}\n            )`,this.ctx.beginPath();let c=n.lookat.times(this.params.eater_size*s.DPR).add(n.position),u=c.sub(n.position).angle(),d=Math.PI/1.3,p=new a.Vector2D(Math.cos(u+d),Math.sin(u+d)),_=new a.Vector2D(Math.cos(u-d),Math.sin(u-d)),f=n.position.add(p.times(this.params.eater_size*s.DPR)),m=n.position.add(_.times(this.params.eater_size*s.DPR));this.ctx.moveTo(f.x/s.DPR,f.y/s.DPR),this.ctx.lineTo(c.x/s.DPR,c.y/s.DPR),this.ctx.lineTo(m.x/s.DPR,m.y/s.DPR),this.ctx.fill()}}drawFood(){this.ctx.fillStyle="rgb(52, 73, 94)";const t=this.params.food_size;for(let e of this.food)this.ctx.beginPath(),this.ctx.fillRect((e.x-t/2)/s.DPR,(e.y-t/2)/s.DPR,t,t),this.ctx.fill()}setSelected(t){this.follow_fittest=!1,this.selected_idx=t}getSelected(){return this.population[this.selected_idx]}getEater(t){return this.population[t]}getEaterBrain(t){return r.NeuralNet.fromWeights(this.layer_sizes,this.genetics.getChromosome(this.population[t].getChromosomeIdx()).getBits()).toFunction()}toggleFastMode(){this.fast_mode=!this.fast_mode}getDarwinInstance(){return this.genetics}getFittestBrain(){return r.NeuralNet.fromWeights(this.layer_sizes,this.genetics.getFittest().getBits()).toFunction()}toggleMating(){this.stop_mating=!this.stop_mating}get selectedIdx(){return this.selected_idx}get parameters(){return this.params}}},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const i=e(6),o=e(0),n=e(1),r=e(8);s.Darwin=class{constructor(t){this.population=[],this.generation=0;const s=()=>{this.stats.needs_update=!0};for(let e=0;e<t.population_size;e++){const e=new i.Chromosome(t.chromosome_length,t.rand_func);e.on("update_fitness",s),this.population.push(e)}this.params=Object.assign({crossover_rate:.7,mutation_rate:1/t.chromosome_length,crossover_method:o.CrossoverMethod.SINGLE_POINT,mutation_method:n.MutationMethod.FLIP,elite_count:1,elite_copies:1},t),this.stats={fittest:this.population[0],avg_fitness:0,sum_fitness:0,fittest_idx:0,needs_update:!0}}duplicateElite(t){if(this.params.elite_count>0){const s=this.getTopChromosomes(this.params.elite_count);t.push(...s);for(let e=0;e<this.params.elite_count;e++)for(let i=0;i<this.params.elite_copies;i++)t.push(s[e].clone())}}crossover(t){for(;t.length<this.params.population_size;)if(Math.random()<this.params.crossover_rate){const s=this.getRandomChromosome(),e=this.getRandomChromosome(),o=s.crossover(e,this.params.crossover_method),n=new i.Chromosome(o.baby1,this.params.rand_func),r=new i.Chromosome(o.baby2,this.params.rand_func);t.push(n,r)}this.params.population_size%2==1&&t.pop()}mutate(t){for(const s of t)s.mutate(this.params.mutation_rate,this.params.mutation_method)}updateFitness(t){for(const s of this.population)s.setFitness(t(s.getBits()));this.stats.needs_update=!0}mate(){const t=[];this.duplicateElite(t),this.crossover(t),this.mutate(t),this.population=t,this.generation++,this.updateStats(!0)}getPopulation(){return this.population}getChromosome(t){return this.population[t]}getRandomChromosome(){if(this.stats.needs_update&&this.updateStats(),0===this.stats.sum_fitness)return this.population[Math.floor(Math.random()*this.population.length)];const t=Math.random()*this.stats.sum_fitness;let s=0;for(let e=0;e<this.population.length;e++)if((s+=this.population[e].getFitness())>t)return this.population[e]}getTopChromosomes(t){return r.partialQuickSort(this.population,t).slice(0,t)}getAverageFitness(){return this.stats.needs_update&&this.updateStats(),this.stats.avg_fitness}getFittest(){return this.stats.needs_update&&this.updateStats(),this.stats.fittest}getParams(){return this.params}getGeneration(){return this.generation}getStats(){return this.stats}updateStats(t=!1){if(t||this.stats.needs_update){let t=0,s=0,e=0;for(let i=0;i<this.population.length;i++){const o=this.population[i].getFitness();t+=o,o>s&&(s=o,e=i)}this.stats.sum_fitness=t,this.stats.avg_fitness=t/this.params.population_size,this.stats.fittest=this.population[e].clone(),this.stats.fittest_idx=e,this.stats.needs_update=!1}}}},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const i=e(1),o=e(0),n=e(7);class r extends n.EventEmitter{constructor(t,s){if(super(),this.bits=[],this.fitness=0,this.rand_func=s,"number"==typeof t){this.length=t;for(let t=0;t<this.length;t++)this.bits.push(s())}else this.bits=t,this.length=t.length}getFitness(){return this.fitness}setFitness(t){this.fitness=t,this.emit("update_fitness",t)}compare(t){let s=0;for(let e=0;e<Math.min(this.length,t.length);e++)s+=this.bits[e]!==t.bits[e]?1:0;return s}mutate_flip(t){for(let s=0;s<this.length;s++)Math.random()<t&&(this.bits[s]=this.rand_func())}mutate_swap(t){for(let s=0;s<this.length;s++)if(Math.random()<t){const t=Math.floor(Math.random()*this.length),e=this.bits[s];this.bits[s]=this.bits[t],this.bits[t]=e}}mutate(t=1/this.length,s){if("number"==typeof s)switch(s){case i.MutationMethod.FLIP:this.mutate_flip(t);break;case i.MutationMethod.SWAP:this.mutate_swap(t)}else this.setBits(s(this.getBits()))}crossover_single_point(t){const s=[],e=[],i=Math.floor(Math.random()*this.length);for(let o=0;o<this.length;o++)s.push(o<i?this.bits[o]:t.bits[o]),e.push(o<i?t.bits[o]:this.bits[o]);return{baby1:s,baby2:e}}crossover_two_point(t){const s=[],e=[];let i=Math.floor(Math.random()*this.length),o=Math.floor(Math.random()*this.length);if(i>o){const t=o;o=i,i=t}for(let n=0;n<this.length;n++)s.push(n<i?this.bits[n]:n<o?t.bits[n]:this.bits[n]),e.push(n<i?t.bits[n]:n<o?this.bits[n]:t.bits[n]);return{baby1:s,baby2:e}}crossover_uniform(t){const s=[],e=[];for(let i=0;i<this.length;i++){let o=Math.random()<.5;s.push(o?t.bits[i]:this.bits[i]),e.push(o?this.bits[i]:t.bits[i])}return{baby1:s,baby2:e}}crossover_half_uniform(t){let s=[],e=[],i=[];for(let s=0;s<this.length;s++)this.bits[s]!==t.bits[s]&&i.push(s);let o=i.length;s=this.bits.slice(),e=t.bits.slice();for(let n=0;n<o/2;n++){let o=Math.floor(Math.random()*i.length);s[i[o]]=t.bits[i[o]],e[i[o]]=this.bits[i[o]],i.splice(o,1)}return{baby1:s,baby2:e}}crossover_ordered(t){const s=[],e=[];let i=Math.floor(Math.random()*this.length),o=Math.floor(Math.random()*this.length),n=i;i=Math.min(i,o),o=Math.max(n,o);for(let n=i;n<o;n++)s[n]=i<=n&&n<=o?t.bits[n]:void 0,e[n]=i<=n&&n<=o?this.bits[n]:void 0;for(let i=0;i<this.length;i++){if(-1===s.indexOf(this.bits[i]))s[i]=this.bits[i];else for(let t=0;t<this.length;t++)-1===s.indexOf(this.bits[t])&&(s[i]=this.bits[t]);if(-1===e.indexOf(t.bits[i]))e[i]=t.bits[i];else for(let s=0;s<this.length;s++)-1===e.indexOf(t.bits[s])&&(e[i]=t.bits[s])}return{baby1:s,baby2:e}}crossover(t,s){if("number"==typeof s)switch(s){case o.CrossoverMethod.SINGLE_POINT:return this.crossover_single_point(t);case o.CrossoverMethod.TWO_POINT:return this.crossover_two_point(t);case o.CrossoverMethod.UNIFORM:return this.crossover_uniform(t);case o.CrossoverMethod.HALF_UNIFORM:return this.crossover_half_uniform(t);case o.CrossoverMethod.ORDERED:return this.crossover_ordered(t);default:throw new Error(`Unimplemented CrossoverMethod: ${s} (${o.CrossoverMethod[s]})`)}return s(t)}setBits(t){this.bits=[...t]}getBits(){return this.bits}copy(t){this.bits=t.bits.slice(),this.rand_func=t.rand_func,this.fitness=t.fitness}clone(){let t=new r(this.length,this.rand_func);return t.copy(this),t}}s.Chromosome=r},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});s.EventEmitter=class{constructor(){this.handlers=new Map}on(t,s){this.handlers.has(t)?this.handlers.get(t).push(s):this.handlers.set(t,[s])}emit(t,s){if(this.handlers.has(t))for(const e of this.handlers.get(t))e.call(this,s)}bindEvent(t,s){t.on(s,t=>this.emit(s,t))}}},function(t,s,e){"use strict";function i(t,s,e){if(s===e)return;const i=t[s];t[s]=t[e],t[e]=i}Object.defineProperty(s,"__esModule",{value:!0}),s.partialQuickSort=function(t,s){return function t(s,e,o,n){const r=Math.floor((e+o)/2);if(e<o){const a=function(t,s,e,o){const n=t[s].getFitness();for(;e<=o;){for(;t[e].getFitness()>n;)e++;for(;t[o].getFitness()<n;)o--;e<=o&&(i(t,e,o),e++,o--)}return e}(s,r,e,o);t(s,e,a-1,n),a<n&&t(s,a,o,n)}}(t,0,t.length-1,s),t}},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const i=e(2);s.Eater=class{constructor(t,s,e){this._pos=t,this._angle=s,this.chromosomeIdx=e}getChromosomeIdx(){return this.chromosomeIdx}get position(){return this._pos}set position(t){this._pos=t}get angle(){return this._angle}set angle(t){this._angle=t%i.MathUtils.TWO_PI}}},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});class i{constructor(){this.weights_and_biases=[]}getWeight(t,s,e){return this.weights_and_biases[this.offsets[t-1]+s*(this.num_neurons_per_layer[t-1]+1)+e+1]}getBias(t,s){return this.weights_and_biases[this.offsets[t-1]+s*(this.num_neurons_per_layer[t-1]+1)]}feedforward(t){if(0===this.weights_and_biases.length)throw new Error("Cannot feedforward before 'putWeights' or 'fromJSON' was called.");if(t.length!==this.num_neurons_per_layer[0])throw new Error(`Expected ${this.num_neurons_per_layer[0]} inputs, got ${t.length}.`);let s,e=t;for(let t=1;t<this.num_neurons_per_layer.length;t++){s=[];for(let i=0;i<this.num_neurons_per_layer[t];i++){let o=this.getBias(t,i);for(let s=0;s<this.num_neurons_per_layer[t-1];s++)o+=this.getWeight(t,i,s)*e[s];s[i]=1/(1+Math.exp(-o))}e=s}return s}run(...t){return this.feedforward(t)}computeOffsets(){this.offsets=[0];let t=0;for(let s=1;s<this.num_neurons_per_layer.length-1;s++)this.offsets.push(t+=this.num_neurons_per_layer[s-1]*(this.num_neurons_per_layer[s]+1))}putWeights(t,s){this.num_neurons_per_layer=t,this.computeOffsets();let e=i.weightsCount(t);if(e!==s.length)throw new Error(`The number of weights do not match the given architecture, expected ${e}, got ${s.length}.`);this.weights_and_biases=s}static weightsCount(t){let s=0;for(let e=1;e<t.length;e++)s+=t[e]*(t[e-1]+1);return s}toJSON(){return{weights_and_biases:this.weights_and_biases,layers:this.num_neurons_per_layer}}toFunction(){return{args:["inputs"],body:`\n            var json = ${JSON.stringify(this.toJSON())};\n\n            if (inputs.length !== json.layers[0])\n                throw new Error('Expected ' + json.layers[0] + ' inputs, got ' + inputs.length + '.');\n\n            var offsets = ${JSON.stringify(this.offsets)}, a = inputs, output;\n\n            for (var l = 1; l < json.layers.length; l++) {\n                output = [];\n                for (var j = 0; j < json.layers[l]; j++) {\n                    var z = json.weights_and_biases[offsets[l - 1] + j * (json.layers[l - 1] + 1)]; \n                    for (var k = 0; k < json.layers[l - 1]; k++)\n                        z += json.weights_and_biases[offsets[l - 1] + j * (json.layers[l - 1] + 1) + k + 1] * a[k];\n                    output[j] = 1 / (1 + Math.exp(-z));\n                }\n                a = output;\n            }\n\n            return output;\n        `}}static fromJSON(t){const s=new i;return s.putWeights(t.layers,t.weights_and_biases),s}static fromWeights(t,s){const e=new i;return e.putWeights(t,s),e}}s.NeuralNet=i},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});class i{constructor(t,s){this.x=t,this.y=s}add(t){return new i(this.x+t.x,this.y+t.y)}sub(t){return new i(this.x-t.x,this.y-t.y)}plus(t){this.x+=t.x,this.y+=t.y}minus(t){this.x-=t.x,this.y-=t.y}dot(t){return this.x*t.x+this.y*t.y}hadamard(t){return t instanceof i?new i(this.x*t.x,this.y*t.y):new i(this.x*t[0],this.y*t[1])}norm(){return Math.pow(this.dot(this),.5)}norm_sq(){return this.dot(this)}times(t){return new i(this.x*t,this.y*t)}normalize(){return this.times(1/this.norm())}dist(t){return this.sub(t).norm()}dist_sq(t){return this.sub(t).norm_sq()}map(t){return new i(t(this.x),t(this.y))}angle(){return Math.atan2(this.y,this.x)}toArray(){return[this.x,this.y]}fromArray(t){return new i(t[0],t[1])}static fill(t){return new i(t,t)}static zeroes(){return i.fill(0)}static ones(){return i.fill(1)}static rand(){return new i(Math.random(),Math.random())}static clone(t){return new i(t.x,t.y)}}s.Vector2D=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,